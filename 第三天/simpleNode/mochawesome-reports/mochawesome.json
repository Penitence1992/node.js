{
  "reportTitle": "simpleNode",
  "stats": {
    "suites": 6,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2016-07-24T06:38:03.946Z",
    "end": "2016-07-24T06:38:03.994Z",
    "duration": 48,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "file:功能测试",
        "suites": [
          {
            "title": "file.writeFile",
            "suites": [],
            "tests": [
              {
                "title": "write file: success",
                "fullTitle": "file:功能测试 file.writeFile write file: success",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">let</span> [path,data] = [<span class=\"hljs-string\">\"_readme.md\"</span>,<span class=\"hljs-string\">\"说明文件：mocha 测试写入\"</span>];<br><span class=\"hljs-keyword\">return</span> file.writeFile(path,data).then(flag =&gt; expect(flag).to.be.equal(<span class=\"hljs-literal\">true</span>));",
                "isRoot": false,
                "uuid": "c60ac8f0-d25a-47a1-9f3b-820dd35743f4",
                "parentUUID": "292c5e65-24dc-43a1-a525-f436d4dcbc0e",
                "skipped": false
              },
              {
                "title": "write file: fail",
                "fullTitle": "file:功能测试 file.writeFile write file: fail",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">let</span> [path,data] = [<span class=\"hljs-string\">\"_write-test.text\"</span>,<span class=\"hljs-string\">\"input data: mocha 测试写入\"</span>];<br><span class=\"hljs-keyword\">return</span> file.writeFile(path,data).then(() =&gt; {},err =&gt; expect(<span class=\"hljs-literal\">true</span>).to.be.equal(<span class=\"hljs-literal\">true</span>));",
                "isRoot": false,
                "uuid": "4fb1b2e0-d259-4f7b-a21b-bbf81971877a",
                "parentUUID": "292c5e65-24dc-43a1-a525-f436d4dcbc0e",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/file_test.js",
            "uuid": "292c5e65-24dc-43a1-a525-f436d4dcbc0e",
            "fullFile": "/media/afterloe/fd50acb0-52b7-440b-ab73-021ac9d01e3b/nodeTran/第三天/simpleNode/test/file_test.js",
            "passes": [
              {
                "title": "write file: success",
                "fullTitle": "file:功能测试 file.writeFile write file: success",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">let</span> [path,data] = [<span class=\"hljs-string\">\"_readme.md\"</span>,<span class=\"hljs-string\">\"说明文件：mocha 测试写入\"</span>];<br><span class=\"hljs-keyword\">return</span> file.writeFile(path,data).then(flag =&gt; expect(flag).to.be.equal(<span class=\"hljs-literal\">true</span>));",
                "isRoot": false,
                "uuid": "c60ac8f0-d25a-47a1-9f3b-820dd35743f4",
                "parentUUID": "292c5e65-24dc-43a1-a525-f436d4dcbc0e",
                "skipped": false
              },
              {
                "title": "write file: fail",
                "fullTitle": "file:功能测试 file.writeFile write file: fail",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">let</span> [path,data] = [<span class=\"hljs-string\">\"_write-test.text\"</span>,<span class=\"hljs-string\">\"input data: mocha 测试写入\"</span>];<br><span class=\"hljs-keyword\">return</span> file.writeFile(path,data).then(() =&gt; {},err =&gt; expect(<span class=\"hljs-literal\">true</span>).to.be.equal(<span class=\"hljs-literal\">true</span>));",
                "isRoot": false,
                "uuid": "4fb1b2e0-d259-4f7b-a21b-bbf81971877a",
                "parentUUID": "292c5e65-24dc-43a1-a525-f436d4dcbc0e",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 11
          },
          {
            "title": "file.readFile",
            "suites": [],
            "tests": [
              {
                "title": "read file: success",
                "fullTitle": "file:功能测试 file.readFile read file: success",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">let</span> path = <span class=\"hljs-string\">\"_readme.md\"</span>;<br><span class=\"hljs-keyword\">return</span> file.readFile(path).then(data =&gt; expect(data).to.be.equal(<span class=\"hljs-string\">\"说明文件：mocha 测试写入\"</span>));",
                "isRoot": false,
                "uuid": "38e14d38-e74b-44bb-b601-59307f755a75",
                "parentUUID": "57cf8666-beaa-48df-a204-3d12ec279a14",
                "skipped": false
              },
              {
                "title": "read file: fail",
                "fullTitle": "file:功能测试 file.readFile read file: fail",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">let</span> path = <span class=\"hljs-string\">\"_write-test,text\"</span>;<br><span class=\"hljs-keyword\">return</span> file.readFile(path).then(() =&gt; {}, err =&gt; expect(<span class=\"hljs-literal\">true</span>).to.be.equal(<span class=\"hljs-literal\">true</span>));",
                "isRoot": false,
                "uuid": "7b7fd522-794f-4151-993f-9d69857f68bf",
                "parentUUID": "57cf8666-beaa-48df-a204-3d12ec279a14",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/file_test.js",
            "uuid": "57cf8666-beaa-48df-a204-3d12ec279a14",
            "fullFile": "/media/afterloe/fd50acb0-52b7-440b-ab73-021ac9d01e3b/nodeTran/第三天/simpleNode/test/file_test.js",
            "passes": [
              {
                "title": "read file: success",
                "fullTitle": "file:功能测试 file.readFile read file: success",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">let</span> path = <span class=\"hljs-string\">\"_readme.md\"</span>;<br><span class=\"hljs-keyword\">return</span> file.readFile(path).then(data =&gt; expect(data).to.be.equal(<span class=\"hljs-string\">\"说明文件：mocha 测试写入\"</span>));",
                "isRoot": false,
                "uuid": "38e14d38-e74b-44bb-b601-59307f755a75",
                "parentUUID": "57cf8666-beaa-48df-a204-3d12ec279a14",
                "skipped": false
              },
              {
                "title": "read file: fail",
                "fullTitle": "file:功能测试 file.readFile read file: fail",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">let</span> path = <span class=\"hljs-string\">\"_write-test,text\"</span>;<br><span class=\"hljs-keyword\">return</span> file.readFile(path).then(() =&gt; {}, err =&gt; expect(<span class=\"hljs-literal\">true</span>).to.be.equal(<span class=\"hljs-literal\">true</span>));",
                "isRoot": false,
                "uuid": "7b7fd522-794f-4151-993f-9d69857f68bf",
                "parentUUID": "57cf8666-beaa-48df-a204-3d12ec279a14",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 7
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/file_test.js",
        "uuid": "a40a0ac0-2471-491f-b730-77cf50d61b1e",
        "fullFile": "/media/afterloe/fd50acb0-52b7-440b-ab73-021ac9d01e3b/nodeTran/第三天/simpleNode/test/file_test.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "utils 工具方法测试",
        "suites": [
          {
            "title": "utils.getDef",
            "suites": [],
            "tests": [
              {
                "title": "defe成功",
                "fullTitle": "utils 工具方法测试 utils.getDef defe成功",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "deferred.resolve(<span class=\"hljs-literal\">true</span>);<br><span class=\"hljs-keyword\">return</span> deferred.promise.then(data =&gt; expect(data).to.be.equal(<span class=\"hljs-literal\">true</span>));",
                "isRoot": false,
                "uuid": "88654964-7dbc-4a31-af28-bbc94e58bfae",
                "parentUUID": "9fe7c9d7-6d69-49cd-b7c2-dd7146631f33",
                "skipped": false
              },
              {
                "title": "defe失败",
                "fullTitle": "utils 工具方法测试 utils.getDef defe失败",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "deferred.resolve(<span class=\"hljs-literal\">true</span>);<br><span class=\"hljs-keyword\">return</span> deferred.promise.then(() =&gt; {},data =&gt; expect(data).to.be.equal(<span class=\"hljs-literal\">true</span>));",
                "isRoot": false,
                "uuid": "8a2c4655-88e6-4169-8ba8-5028ad2dbdd8",
                "parentUUID": "9fe7c9d7-6d69-49cd-b7c2-dd7146631f33",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/utils_test.js",
            "uuid": "9fe7c9d7-6d69-49cd-b7c2-dd7146631f33",
            "fullFile": "/media/afterloe/fd50acb0-52b7-440b-ab73-021ac9d01e3b/nodeTran/第三天/simpleNode/test/utils_test.js",
            "passes": [
              {
                "title": "defe成功",
                "fullTitle": "utils 工具方法测试 utils.getDef defe成功",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "deferred.resolve(<span class=\"hljs-literal\">true</span>);<br><span class=\"hljs-keyword\">return</span> deferred.promise.then(data =&gt; expect(data).to.be.equal(<span class=\"hljs-literal\">true</span>));",
                "isRoot": false,
                "uuid": "88654964-7dbc-4a31-af28-bbc94e58bfae",
                "parentUUID": "9fe7c9d7-6d69-49cd-b7c2-dd7146631f33",
                "skipped": false
              },
              {
                "title": "defe失败",
                "fullTitle": "utils 工具方法测试 utils.getDef defe失败",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "deferred.resolve(<span class=\"hljs-literal\">true</span>);<br><span class=\"hljs-keyword\">return</span> deferred.promise.then(() =&gt; {},data =&gt; expect(data).to.be.equal(<span class=\"hljs-literal\">true</span>));",
                "isRoot": false,
                "uuid": "8a2c4655-88e6-4169-8ba8-5028ad2dbdd8",
                "parentUUID": "9fe7c9d7-6d69-49cd-b7c2-dd7146631f33",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "utils.when",
            "suites": [],
            "tests": [
              {
                "title": "when success",
                "fullTitle": "utils 工具方法测试 utils.when when success",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "deferred1.resolve(<span class=\"hljs-literal\">true</span>);<br>deferred2.resolve(<span class=\"hljs-literal\">true</span>);<br><span class=\"hljs-keyword\">return</span> utils.when([deferred1.promise,deferred2.promise]).then(data =&gt; {<br>\texpect(data).to.be.deep.equal([<span class=\"hljs-literal\">true</span>,<span class=\"hljs-literal\">true</span>]);<br>});",
                "isRoot": false,
                "uuid": "e4afd72b-5b24-40fa-9672-680ebed0bbc2",
                "parentUUID": "ec8e2883-c005-49f3-a598-10d372745ea5",
                "skipped": false
              },
              {
                "title": "when fail",
                "fullTitle": "utils 工具方法测试 utils.when when fail",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "deferred3.resolve(<span class=\"hljs-literal\">true</span>);<br>deferred4.resolve(<span class=\"hljs-literal\">false</span>);<br><span class=\"hljs-keyword\">return</span> utils.when([deferred3.promise,deferred4.promise]).then(() =&gt; {}, data =&gt; expect(data).to.be.equal(<span class=\"hljs-literal\">false</span>));",
                "isRoot": false,
                "uuid": "60d6d953-cbdb-433a-a4df-bfa9864d34ec",
                "parentUUID": "ec8e2883-c005-49f3-a598-10d372745ea5",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/utils_test.js",
            "uuid": "ec8e2883-c005-49f3-a598-10d372745ea5",
            "fullFile": "/media/afterloe/fd50acb0-52b7-440b-ab73-021ac9d01e3b/nodeTran/第三天/simpleNode/test/utils_test.js",
            "passes": [
              {
                "title": "when success",
                "fullTitle": "utils 工具方法测试 utils.when when success",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "deferred1.resolve(<span class=\"hljs-literal\">true</span>);<br>deferred2.resolve(<span class=\"hljs-literal\">true</span>);<br><span class=\"hljs-keyword\">return</span> utils.when([deferred1.promise,deferred2.promise]).then(data =&gt; {<br>\texpect(data).to.be.deep.equal([<span class=\"hljs-literal\">true</span>,<span class=\"hljs-literal\">true</span>]);<br>});",
                "isRoot": false,
                "uuid": "e4afd72b-5b24-40fa-9672-680ebed0bbc2",
                "parentUUID": "ec8e2883-c005-49f3-a598-10d372745ea5",
                "skipped": false
              },
              {
                "title": "when fail",
                "fullTitle": "utils 工具方法测试 utils.when when fail",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "deferred3.resolve(<span class=\"hljs-literal\">true</span>);<br>deferred4.resolve(<span class=\"hljs-literal\">false</span>);<br><span class=\"hljs-keyword\">return</span> utils.when([deferred3.promise,deferred4.promise]).then(() =&gt; {}, data =&gt; expect(data).to.be.equal(<span class=\"hljs-literal\">false</span>));",
                "isRoot": false,
                "uuid": "60d6d953-cbdb-433a-a4df-bfa9864d34ec",
                "parentUUID": "ec8e2883-c005-49f3-a598-10d372745ea5",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 8
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/utils_test.js",
        "uuid": "f04f42f6-91dc-4f28-9dec-a384cc814585",
        "fullFile": "/media/afterloe/fd50acb0-52b7-440b-ab73-021ac9d01e3b/nodeTran/第三天/simpleNode/test/utils_test.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "f4450a6a-62b5-410f-b3d7-6749b2ea633d",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "write file: success",
      "fullTitle": "file.writeFile write file: success",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">let</span> [path,data] = [<span class=\"hljs-string\">\"_readme.md\"</span>,<span class=\"hljs-string\">\"说明文件：mocha 测试写入\"</span>];<br><span class=\"hljs-keyword\">return</span> file.writeFile(path,data).then(flag =&gt; expect(flag).to.be.equal(<span class=\"hljs-literal\">true</span>));",
      "isRoot": false,
      "uuid": "1f689946-7ddd-4757-be73-82023ec6c7c9",
      "parentUUID": "292c5e65-24dc-43a1-a525-f436d4dcbc0e",
      "skipped": false
    },
    {
      "title": "write file: fail",
      "fullTitle": "file.writeFile write file: fail",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">let</span> [path,data] = [<span class=\"hljs-string\">\"_write-test.text\"</span>,<span class=\"hljs-string\">\"input data: mocha 测试写入\"</span>];<br><span class=\"hljs-keyword\">return</span> file.writeFile(path,data).then(() =&gt; {},err =&gt; expect(<span class=\"hljs-literal\">true</span>).to.be.equal(<span class=\"hljs-literal\">true</span>));",
      "isRoot": false,
      "uuid": "c34b6401-26e2-45db-a569-676753cbd13c",
      "parentUUID": "292c5e65-24dc-43a1-a525-f436d4dcbc0e",
      "skipped": false
    },
    {
      "title": "read file: success",
      "fullTitle": "file.readFile read file: success",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">let</span> path = <span class=\"hljs-string\">\"_readme.md\"</span>;<br><span class=\"hljs-keyword\">return</span> file.readFile(path).then(data =&gt; expect(data).to.be.equal(<span class=\"hljs-string\">\"说明文件：mocha 测试写入\"</span>));",
      "isRoot": false,
      "uuid": "251816c2-caba-4219-af03-1298aabb1bfb",
      "parentUUID": "57cf8666-beaa-48df-a204-3d12ec279a14",
      "skipped": false
    },
    {
      "title": "read file: fail",
      "fullTitle": "file.readFile read file: fail",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">let</span> path = <span class=\"hljs-string\">\"_write-test,text\"</span>;<br><span class=\"hljs-keyword\">return</span> file.readFile(path).then(() =&gt; {}, err =&gt; expect(<span class=\"hljs-literal\">true</span>).to.be.equal(<span class=\"hljs-literal\">true</span>));",
      "isRoot": false,
      "uuid": "15d06b70-e8e5-48b5-bc15-e78f02c059e1",
      "parentUUID": "57cf8666-beaa-48df-a204-3d12ec279a14",
      "skipped": false
    },
    {
      "title": "defe成功",
      "fullTitle": "utils.getDef defe成功",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "deferred.resolve(<span class=\"hljs-literal\">true</span>);<br><span class=\"hljs-keyword\">return</span> deferred.promise.then(data =&gt; expect(data).to.be.equal(<span class=\"hljs-literal\">true</span>));",
      "isRoot": false,
      "uuid": "54d1281a-485b-461c-a508-74a7a20743bd",
      "parentUUID": "9fe7c9d7-6d69-49cd-b7c2-dd7146631f33",
      "skipped": false
    },
    {
      "title": "defe失败",
      "fullTitle": "utils.getDef defe失败",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "deferred.resolve(<span class=\"hljs-literal\">true</span>);<br><span class=\"hljs-keyword\">return</span> deferred.promise.then(() =&gt; {},data =&gt; expect(data).to.be.equal(<span class=\"hljs-literal\">true</span>));",
      "isRoot": false,
      "uuid": "21965e2d-a4af-4649-921e-72545c5317d4",
      "parentUUID": "9fe7c9d7-6d69-49cd-b7c2-dd7146631f33",
      "skipped": false
    },
    {
      "title": "when success",
      "fullTitle": "utils.when when success",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "deferred1.resolve(<span class=\"hljs-literal\">true</span>);<br>deferred2.resolve(<span class=\"hljs-literal\">true</span>);<br><span class=\"hljs-keyword\">return</span> utils.when([deferred1.promise,deferred2.promise]).then(data =&gt; {<br>\texpect(data).to.be.deep.equal([<span class=\"hljs-literal\">true</span>,<span class=\"hljs-literal\">true</span>]);<br>});",
      "isRoot": false,
      "uuid": "6ec50667-17c8-4814-845a-49d4eae6fb8b",
      "parentUUID": "ec8e2883-c005-49f3-a598-10d372745ea5",
      "skipped": false
    },
    {
      "title": "when fail",
      "fullTitle": "utils.when when fail",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "deferred3.resolve(<span class=\"hljs-literal\">true</span>);<br>deferred4.resolve(<span class=\"hljs-literal\">false</span>);<br><span class=\"hljs-keyword\">return</span> utils.when([deferred3.promise,deferred4.promise]).then(() =&gt; {}, data =&gt; expect(data).to.be.equal(<span class=\"hljs-literal\">false</span>));",
      "isRoot": false,
      "uuid": "a36a3c64-5d68-4796-ac84-bef062a430b8",
      "parentUUID": "ec8e2883-c005-49f3-a598-10d372745ea5",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "write file: success",
      "fullTitle": "file.writeFile write file: success",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">let</span> [path,data] = [<span class=\"hljs-string\">\"_readme.md\"</span>,<span class=\"hljs-string\">\"说明文件：mocha 测试写入\"</span>];<br><span class=\"hljs-keyword\">return</span> file.writeFile(path,data).then(flag =&gt; expect(flag).to.be.equal(<span class=\"hljs-literal\">true</span>));",
      "isRoot": false,
      "uuid": "4af60aaa-f547-417a-b055-5e4c60a0aa75",
      "parentUUID": "292c5e65-24dc-43a1-a525-f436d4dcbc0e",
      "skipped": false
    },
    {
      "title": "write file: fail",
      "fullTitle": "file.writeFile write file: fail",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">let</span> [path,data] = [<span class=\"hljs-string\">\"_write-test.text\"</span>,<span class=\"hljs-string\">\"input data: mocha 测试写入\"</span>];<br><span class=\"hljs-keyword\">return</span> file.writeFile(path,data).then(() =&gt; {},err =&gt; expect(<span class=\"hljs-literal\">true</span>).to.be.equal(<span class=\"hljs-literal\">true</span>));",
      "isRoot": false,
      "uuid": "d748ee5b-9eab-400b-b667-3ee7cdfd6efc",
      "parentUUID": "292c5e65-24dc-43a1-a525-f436d4dcbc0e",
      "skipped": false
    },
    {
      "title": "read file: success",
      "fullTitle": "file.readFile read file: success",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">let</span> path = <span class=\"hljs-string\">\"_readme.md\"</span>;<br><span class=\"hljs-keyword\">return</span> file.readFile(path).then(data =&gt; expect(data).to.be.equal(<span class=\"hljs-string\">\"说明文件：mocha 测试写入\"</span>));",
      "isRoot": false,
      "uuid": "49484544-b91f-4fcd-a752-db37f876cb3a",
      "parentUUID": "57cf8666-beaa-48df-a204-3d12ec279a14",
      "skipped": false
    },
    {
      "title": "read file: fail",
      "fullTitle": "file.readFile read file: fail",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">let</span> path = <span class=\"hljs-string\">\"_write-test,text\"</span>;<br><span class=\"hljs-keyword\">return</span> file.readFile(path).then(() =&gt; {}, err =&gt; expect(<span class=\"hljs-literal\">true</span>).to.be.equal(<span class=\"hljs-literal\">true</span>));",
      "isRoot": false,
      "uuid": "59832a17-6bfb-4b21-8f59-61418dacf1a5",
      "parentUUID": "57cf8666-beaa-48df-a204-3d12ec279a14",
      "skipped": false
    },
    {
      "title": "defe成功",
      "fullTitle": "utils.getDef defe成功",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "deferred.resolve(<span class=\"hljs-literal\">true</span>);<br><span class=\"hljs-keyword\">return</span> deferred.promise.then(data =&gt; expect(data).to.be.equal(<span class=\"hljs-literal\">true</span>));",
      "isRoot": false,
      "uuid": "4c61a644-2eb9-4fe0-94e5-fb5239abac2a",
      "parentUUID": "9fe7c9d7-6d69-49cd-b7c2-dd7146631f33",
      "skipped": false
    },
    {
      "title": "defe失败",
      "fullTitle": "utils.getDef defe失败",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "deferred.resolve(<span class=\"hljs-literal\">true</span>);<br><span class=\"hljs-keyword\">return</span> deferred.promise.then(() =&gt; {},data =&gt; expect(data).to.be.equal(<span class=\"hljs-literal\">true</span>));",
      "isRoot": false,
      "uuid": "5b69b6a1-8394-4cd2-a1e0-f9516f575c5b",
      "parentUUID": "9fe7c9d7-6d69-49cd-b7c2-dd7146631f33",
      "skipped": false
    },
    {
      "title": "when success",
      "fullTitle": "utils.when when success",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "deferred1.resolve(<span class=\"hljs-literal\">true</span>);<br>deferred2.resolve(<span class=\"hljs-literal\">true</span>);<br><span class=\"hljs-keyword\">return</span> utils.when([deferred1.promise,deferred2.promise]).then(data =&gt; {<br>\texpect(data).to.be.deep.equal([<span class=\"hljs-literal\">true</span>,<span class=\"hljs-literal\">true</span>]);<br>});",
      "isRoot": false,
      "uuid": "8ffd5ba0-c372-4f5f-b768-f24b56a19efa",
      "parentUUID": "ec8e2883-c005-49f3-a598-10d372745ea5",
      "skipped": false
    },
    {
      "title": "when fail",
      "fullTitle": "utils.when when fail",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "deferred3.resolve(<span class=\"hljs-literal\">true</span>);<br>deferred4.resolve(<span class=\"hljs-literal\">false</span>);<br><span class=\"hljs-keyword\">return</span> utils.when([deferred3.promise,deferred4.promise]).then(() =&gt; {}, data =&gt; expect(data).to.be.equal(<span class=\"hljs-literal\">false</span>));",
      "isRoot": false,
      "uuid": "b06c5223-55fe-40ab-98a1-b8e592d2f36a",
      "parentUUID": "ec8e2883-c005-49f3-a598-10d372745ea5",
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2016
}