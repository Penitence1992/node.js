""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 显示相关  
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax on " 自动语法高亮
set number " 显示行号
set dictionary+=/home/afterloe/.dict/es6.dict
" "set dictionary+=/home/afterloe/.dict/c.dirct
" set cursorline " 突出显示当前行
set shiftwidth=4 " 设定 << 和 >> 命令移动时的宽度为 4
set softtabstop=4 " 使得按退格键时可以一次删掉 4 个空格
set tabstop=4 " 设定 tab 长度为 4
set nobackup " 覆盖文件时不备份
set autochdir " 自动切换当前目录为当前文件所在的目录
filetype plugin indent on " 开启插件
set ignorecase smartcase " 搜索时忽略大小写，但在有一个或以上大写字母时仍保持对大小写敏感
set pastetoggle=<F5> "插入模式粘贴不会自动缩进避免混乱
set nowrapscan " 禁止在搜索到文件两端时重新搜索
set incsearch " 输入搜索内容时就显示搜索结果
set hlsearch " 搜索时高亮显示被找到的文本
set foldenable " 开始折叠
set foldmethod=syntax " 设置语法折叠
set foldcolumn=0 " 设置折叠区域的宽度
setlocal foldlevel=1 " 设置折叠层数为1

filetype plugin on
set completeopt=preview,menu
autocmd FileType c,cpp map <buffer> <leader><space> :w<cr>:make<cr>
set foldcolumn=0
set foldmethod=indent 
set foldlevel=3 
set nocompatible

"""""新文件标题""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd BufNewFile *.js,*.html exec ":call SetTitle()"
func SetTitle()
    ".js"
    if &filetype == 'js'
		call setline(1, "/**!")
		call setline(1, " * - .js")
		call setline(1, " *")
		call setline(1, " * Copyright(c) afterloe.")
		call setline(1, " * ISC Licensed")
		call setline(1, " *")
		call setline(1, " * Authors:")
		call setline(1, " *   afterloe <lm6289511@gmail.com> (https://github.com/afterloe)")
		call setline(1, " */")
    endif
	".html"
    if &filetype == 'html'
		call setline(1, "<!--")
		call setline(1, " Authors: afterloe <lm6289511@gmail.com> (https://github.com/afterloe)")
		call setline(1, "-->")
    endif
"新建文件后，自动定位到文件末尾"
    autocmd BufNewFile * normal G
endfunc

map <F3> :tabnew .<CR>
map <C-F3> \be  

map <F5> :call CompileRunNode()<CR>
func! CompileRunNode()
	let file_name = expand("%:p")
	let file_ext = expand("%:e")
	let file_cmd = ""

	if file_ext == 'js'
		let file_cmd = "node"
		let file_args = " ". file_name
	endif

	if "" != file_cmd
		if ! executable(file_cmd)
			echo file_cmd
            echo "The executable file to compile ". file_ext . " type files."
		else
			let cmd = "! ". file_cmd . ' ' . file_args
			"echo" "执行命令:". cmd
		    exec cmd 
        endif
	endif
endfunc

""自动补全""
:inoremap ( ()<ESC>i
:inoremap ) <c-r>=ClosePair(')')<CR>
:inoremap { {}<ESC>i
:inoremap } <c-r>=ClosePair('}')<CR>
:inoremap [ []<ESC>i
:inoremap ] <c-r>=ClosePair(']')<CR>
:inoremap < <><ESC>i
:inoremap > <c-r>=ClosePair('>')<CR>
:inoremap " ""<ESC>i
:inoremap ` ``<ESC>i
:inoremap ' ''<ESC>i
function! ClosePair(char)
	if getline('.')[col('.') - 1] == a:char
		return "\<Right>"
	else
		return a:char
	endif
endfunction
filetype plugin indent on 
